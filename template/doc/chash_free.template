include(./chash.m4)

CHASH_HEADER()

.SH NAME
chash_free - release the hashtable and its contents from memory

.SH SYNOPSIS
CHASH_INCLUSIONS()

.BI "#define chash_free(" "hashtable" ", " "namespace" ");"

.SH DESCRIPTION
The
.B chash_free
macro will release the contents of the hashtable from memory, as well as the
hashtable itself if the hashtable is in stack mode. It will invoke the
.B HASHTABLE_NAME_FREE_KEY
and
.B HASHTABLE_NAME_FREE_VALUE
macros on each key value pair that is not marked as empty or a tombstone.

CHASH_ERROR_LIST_START()
CHASH_ERROR_COND(`The buffer is NULL')
CHASH_ERROR_LIST_END()


CHASH_PARAMETER(`hashtable', `the hashtable to free')
CHASH_PARAMETER(`namespace', `the namespace of the hashtable settings to use')

.SH EXAMPLES
CHASH_EXAMPLE_COMMENT(`chash_free')
CHASH_INCLUSIONS()
CHASH_EXAMPLE_INFO(1)

int main(void) {
.br
    int exists = -1;
.br
    struct StringHashtable *hashtable = chash_init(hashtable, STRING_TABLE);
.br

    /* Add some keys */
.br
    chash_assign(hashtable, "foo", 1, STRING_TABLE);
.br
    chash_assign(hashtable, "bar", 2, STRING_TABLE);
.br
    chash_assign(hashtable, "baz", 3, STRING_TABLE);
.br

    /* Free the hashtable */
.br
    chash_free(hashtable, STRING_TABLE);
.br

    return EXIT_SUCCESS;
.br
}

.SH CONFORMING TO
This macro conforms to C89.

.SH SEE ALSO
CHASH_SEE_ALSO()
