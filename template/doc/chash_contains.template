include(./chash.m4)

CHASH_HEADER()

.SH NAME
chash_contains - determine whether or not a key exists in a hashtable

.SH SYNOPSIS
CHASH_INCLUSIONS()

.BI "#define chash_contains(" "hashtable" ", " "_key" " , " "storage" ", " \
"namespace" ");"

.SH DESCRIPTION
The
.B chash_contains
will determine if a key exists inside of a hashtable, and write its status to
the
.I storage
variable. This macro will not raise an error if it does not exist, and such is
what should be used instead of
.BI chash_lookup (cware)
when you are unsure of the key's existence. If the key does exist in the
hashtable, then
.B 1
will be written to
.IR storage ,
and if the key does not exist in the hashtable, then
.B 0
will be written to
.IR storage .

CHASH_ERROR_LIST_START()
CHASH_ERROR_COND(`The buffer is NULL')
CHASH_ERROR_LIST_END()


CHASH_PARAMETER(`hashtable', `the hashtable to search in')
CHASH_PARAMETER(`_key', `the key to search for')
CHASH_PARAMETER(`namespace', `the namespace of the hashtable settings to use')

.SH EXAMPLES
CHASH_EXAMPLE_COMMENT(`chash_contains')
CHASH_INCLUSIONS()
CHASH_EXAMPLE_INFO(1)

int main(void) {
.br
    int exists = -1;
.br
    struct StringHashtable *hashtable = chash_init(hashtable, STRING_TABLE);
.br

    /* Add some keys */
.br
    chash_assign(hashtable, "foo", 1, STRING_TABLE);
.br
    chash_assign(hashtable, "bar", 2, STRING_TABLE);
.br
    chash_assign(hashtable, "baz", 3, STRING_TABLE);
.br

    /* Display whether or not each key exists */
.br
    chash_contains(hashtable, "foo", exists, STRING_TABLE);
.br
    printf("'%s' exists in hashtable: %i\\n", "foo", exists);
.br

    chash_contains(hashtable, "bar", exists, STRING_TABLE);
.br
    printf("'%s' exists in hashtable: %i\\n", "bar", exists);
.br

    chash_contains(hashtable, "baz", exists, STRING_TABLE);
.br
    printf("'%s' exists in hashtable: %i\\n", "baz", exists);
.br

    chash_contains(hashtable, "tuna", exists, STRING_TABLE);
.br
    printf("'%s' exists in hashtable: %i\\n", "tuna", exists);
.br

    /* Free the hashtable */
.br
    chash_free(hashtable, STRING_TABLE);
.br

    return EXIT_SUCCESS;
.br
}

.SH CONFORMING TO
This macro conforms to C89.

.SH SEE ALSO
CHASH_SEE_ALSO()
