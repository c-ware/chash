





















.TH "CHASH_LOOKUP" "cware" "March 8th, 2022" "" \
    "C-Ware Manual"


.SH NAME
chash_lookup - retrieve the value assigned to a key

.SH SYNOPSIS

.B #include <stdio.h>
.br
.B #include <stdlib.h>
.br
.B #include <string.h>
.br
.B #include <cware/chash/chash.h>
.br


.BI "#define chash_lookup(" "hashtable" ", " "_key" , " storage" ", " \
"namespace" ");"

.SH DESCRIPTION
The
.B chash_lookup
macro will retrieve the value assigned to a key, and write it into the variable
.IR storage .
If the key cannot be found in the hashtable, an error is raised. If you would
like to simply detect if a key exists in a hashtable without raising an error
if it is not, use
.BR chash_contains (cware).


This macro will print an error message to the stderr, and exit the program when
any of the following conditions are met:
.RS


.IP \[bu] 0.4i
The buffer is NULL
.br


.IP \[bu] 0.4i
The key does not exist in the hashtable
.br


.RE



.I hashtable
will be the hashtable to lookup in
.br
.I _key
will be the key to lookup
.br
.I storage
will be the location to write the value to
.br
.I namespace
will be the namespace of the hashtable settings to use
.br

.SH EXAMPLES

/*
.br
 * This example showcases how to use the
.B chash_lookup
macro.
.br
*/


.B #include <stdio.h>
.br
.B #include <stdlib.h>
.br
.B #include <string.h>
.br
.B #include <cware/chash/chash.h>
.br


.TS
tab(;);
l l
.
#define STRING_TABLE_HEAP;1
#define STRING_TABLE_BUCKET;struct StringBucket
#define STRING_TABLE_FREE_KEY(key);NULL
#define STRING_TABLE_HASH(key, hash);chash_string_hash(key, hash)
#define STRING_TABLE_FREE_VALUE(value);NULL
#define STRING_TABLE_COMPARE(cmp_a, cmp_b);chash_string_compare(cmp_a, cmp_b)
#define STRING_TABLE_INIT(bucket, _key, _value);\
chash_default_init(bucket, _key, _value)
.TE

struct StringBucket {
.br
    char *key;
.br
    int value;
.br
    int state;
.br
};

struct StringHashtable {
.br
    int length;
.br
    int capacity;
.br
    struct StringBucket *buckets;
.br
};


int main(void) {
.br
    char *value = NULL;
.br
    struct StringHashtable *hashtable = chash_init(hashtable, STRING_TABLE);
.br

    /* Add some keys */
.br
    chash_assign(hashtable, "foo", 1, STRING_TABLE);
.br
    chash_assign(hashtable, "bar", 2, STRING_TABLE);
.br
    chash_assign(hashtable, "baz", 3, STRING_TABLE);
.br

    /* Retrieve and display their values */
.br
    value = chash_lookup(hashtable, "foo", value, STRING_TABLE);
.br
    printf("%s\\n", value);
.br
    value = chash_lookup(hashtable, "bar", value, STRING_TABLE);
.br
    printf("%s\\n", value);
.br
    value = chash_lookup(hashtable, "baz", value, STRING_TABLE);
.br
    printf("%s\\n", value);
.br

    /* Free the hashtable */
.br
    chash_free(hashtable, STRING_TABLE);
.br

    return EXIT_SUCCESS;
.br
}

.SH CONFORMING TO
This macro conforms to C89.

.SH SEE ALSO

.BR cware (cware),
.BR chash (cware)

