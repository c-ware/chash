





















.TH "CHASH_INIT_STACK" "cware" "March 8th, 2022" "" \
    "C-Ware Manual"


.SH NAME
chash_init_stack - initialise a new hashtable on the stack

.SH SYNOPSIS

.B #include <stdio.h>
.br
.B #include <stdlib.h>
.br
.B #include <string.h>
.br
.B #include <cware/chash/chash.h>
.br


.BI "#define chash_init_stack(" "hashtable" ", " "buffer" ", " "_length" ", " \
"namespace" ");"

.SH DESCRIPTION
The
.B chash_init_stack
macro will initialise a new hashtable on the stack, and write it into the
variable
.IR hashtable .
The hashtable produced by this macro does not have to be released from memory,
as it is allocated on the stack.


This macro will print an error message to the stderr, and exit the program when
any of the following conditions are met:
.RS


.IP \[bu] 0.4i
The buffer is NULL
.br


.IP \[bu] 0.4i
The length is less than or equal to zero
.br


.RE



.I hashtable
will be the variable to initialise the hashtable into
.br
.I buffer
will be the stack array to use for the contents
.br
.I length
will be the maximum length of the stack array
.br
.I namespace
will be the namespace of the hashtable settings to use
.br

.SH EXAMPLES

/*
.br
 * This example showcases how to use the
.B chash_init_stack
macro.
.br
*/


.B #include <stdio.h>
.br
.B #include <stdlib.h>
.br
.B #include <string.h>
.br
.B #include <cware/chash/chash.h>
.br


.TS
tab(;);
l l
.
#define STRING_TABLE_HEAP;0
#define STRING_TABLE_BUCKET;struct StringBucket
#define STRING_TABLE_FREE_KEY(key);NULL
#define STRING_TABLE_HASH(key, hash);chash_string_hash(key, hash)
#define STRING_TABLE_FREE_VALUE(value);NULL
#define STRING_TABLE_COMPARE(cmp_a, cmp_b);chash_string_compare(cmp_a, cmp_b)
#define STRING_TABLE_INIT(bucket, _key, _value);\
chash_default_init(bucket, _key, _value)
.TE

struct StringBucket {
.br
    char *key;
.br
    int value;
.br
    int state;
.br
};

struct StringHashtable {
.br
    int length;
.br
    int capacity;
.br
    struct StringBucket *buckets;
.br
};


int main(void) {
.br
    struct StringBucket buckets[10] = {0};
.br
    struct StringHashtable hashtable = chash_init_stack(&hashtable,
.br
                                                        STRING_TABLE, buckets,
.br
                                                        10);
.br

    /* Perform operations on the hashtable */
.br
    chash_assign(&hashtable, "foo", 1);
.br
    chash_assign(&hashtable, "bar", 2);
.br

    /* Free the hashtable */
.br
    chash_free(&hashtable, STRING_TABLE);
.br

    return EXIT_SUCCESS;
.br
}

.SH CONFORMING TO
This macro conforms to C89.

.SH SEE ALSO

.BR cware (cware),
.BR chash (cware)

