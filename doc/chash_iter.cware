





















.TH "CHASH_ITER" "cware" "March 8th, 2022" "" \
    "C-Ware Manual"


.SH NAME
chash_iter - iterate through a hashtable

.SH SYNOPSIS

.B #include <stdio.h>
.br
.B #include <stdlib.h>
.br
.B #include <string.h>
.br
.B #include <cware/chash/chash.h>
.br


.BI "#define chash_iter(" "hashtable" ", " "index" ");"
.br
.BI "#define chash_get(" "hashtable" ", " "index" ", " "_key" ", " "_value" \
");"

.SH DESCRIPTION
The
.B chash_iter
macro will begin iteration through the hashtable. Extracting the current key
and value, as well as skipping empty buckets, is done by calling the
.BR chash_get (cware)
macro.

The
.B chash_iter
macro has no error conditions.

.I hashtable
will be the hashtable to iterate through
.br
.I index
will be the index in the hashtable
.br

The
.B chash_get
macro will skip over any indexes containing unfilled buckets, and extract
the keys and values at the current location in the hashtable. Intended to be
used in the body of the for loop.

This macro has no error conditions.

.I hashtable
will be the hashtable to check the buckets of
.br
.I index
will be the index in the hashtable
.br
.I _key
will be the variable to write the key to
.br
.I _value
will be the variable to write the value to
.br

.SH EXAMPLES

/*
.br
 * This example showcases how to use the
.B chash_iter
macro.
.br
*/


.B #include <stdio.h>
.br
.B #include <stdlib.h>
.br
.B #include <string.h>
.br
.B #include <cware/chash/chash.h>
.br


.TS
tab(;);
l l
.
#define STRING_TABLE_HEAP;1
#define STRING_TABLE_BUCKET;struct StringBucket
#define STRING_TABLE_FREE_KEY(key);NULL
#define STRING_TABLE_HASH(key, hash);chash_string_hash(key, hash)
#define STRING_TABLE_FREE_VALUE(value);NULL
#define STRING_TABLE_COMPARE(cmp_a, cmp_b);chash_string_compare(cmp_a, cmp_b)
#define STRING_TABLE_INIT(bucket, _key, _value);\
chash_default_init(bucket, _key, _value)
.TE

struct StringBucket {
.br
    char *key;
.br
    int value;
.br
    int state;
.br
};

struct StringHashtable {
.br
    int length;
.br
    int capacity;
.br
    struct StringBucket *buckets;
.br
};


int main(void) {
.br
    char *key = NULL;
.br
    int index = 0;
.br
    int value = 0;
.br
    struct StringHashtable *hashtable = chash_init(hashtable, STRING_TABLE);
.br

    /* Add some keys */
.br
    chash_assign(hashtable, "foo", 1);
.br
    chash_assign(hashtable, "bar", 2);
.br
    chash_assign(hashtable, "baz", 3);

    /* Iterate through the hashtable */
.br
    chash_iter(hashtable, index) {
.br
        /* Skip through unfilled buckets, and extract the keys and values */
.br
        chash_skip(hashtable, key, value, index);
.br

        printf("%s: %i\\n", key, value);
.br
    }
.br

    /* Free the hashtable */
.br
    chash_free(hashtable, STRING_TABLE);
.br

    return EXIT_SUCCESS;
.br
}

.SH CONFORMING TO
This macro conforms to C89.

.SH SEE ALSO

.BR cware (cware),
.BR chash (cware)

